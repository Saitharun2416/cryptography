Write a program for DES algorithm for decryption, the 16 keys (K1, K2, c, K16) are used
in reverse order. Design a key-generation scheme with the appropriate shift schedule for
the decryption process.


#include <stdio.h>
#include <stdint.h>

uint64_t round_keys[] = {
    12345678901234, 23456789012345, 34567890123456, 45678901234567,
    56789012345678, 67890123456789, 78901234567890, 89012345678901,
    90123456789012, 101234567890123, 112345678901234, 123456789012345,
    134567890123456, 145678901234567, 156789012345678, 167890123456789
};

int IP[] = {
    58, 50, 42, 34, 26, 18, 10, 2,
    60, 52, 44, 36, 28, 20, 12, 4,
    62, 54, 46, 38, 30, 22, 14, 6,
    64, 56, 48, 40, 32, 24, 16, 8,
    57, 49, 41, 33, 25, 17, 9, 1,
    59, 51, 43, 35, 27, 19, 11, 3,
    61, 53, 45, 37, 29, 21, 13, 5,
    63, 55, 47, 39, 31, 23, 15, 7
};

int FP[] = {
    40, 8, 48, 16, 56, 24, 64, 32,
    39, 7, 47, 15, 55, 23, 63, 31,
    38, 6, 46, 14, 54, 22, 62, 30,
    37, 5, 45, 13, 53, 21, 61, 29,
    36, 4, 44, 12, 52, 20, 60, 28,
    35, 3, 43, 11, 51, 19, 59, 27,
    34, 2, 42, 10, 50, 18, 58, 26,
    33, 1, 41, 9, 49, 17, 57, 25
};

uint64_t permute(uint64_t data, const int *table, int size) {
    uint64_t result = 0;
    for (int i = 0; i < size; i++) {
        result |= ((data >> (64 - table[i])) & 1) << (size - 1 - i);
    }
    return result;
}

uint64_t des_decrypt(uint64_t ciphertext) {
    uint64_t data = permute(ciphertext, IP, 64);
    for (int i = 15; i >= 0; i--) {
        data ^= round_keys[i];
    }
    data = permute(data, FP, 64);
    return data;
}

int main() {
    uint64_t ciphertext = 123456789012345678;
    uint64_t plaintext = des_decrypt(ciphertext);
    printf("Ciphertext: %lu\n", ciphertext);
    printf("Decrypted Plaintext: %lu\n", plaintext);
    return 0;
}
